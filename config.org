#+TITLE: Emacs configuration
#+AUTHOR: John Downey
#+EMAIL: jdowney@gmail.com
#+OPTIONS: toc:nil num:nil

* Packaging

  - Install =use-package= and =diminish=
    #+begin_src emacs-lisp
      (straight-use-package 'diminish)
      (straight-use-package 'use-package)
    #+end_src

* Personalization

  - Set my information
    #+begin_src emacs-lisp
      (setq user-full-name "John Downey"
            user-login-name "jtdowney"
            user-mail-address "jdowney@gmail.com")
    #+end_src

  - Set load path
    #+begin_src emacs-lisp
      (defun jtdowney/add-exec-path (path)
        "Add a path to both the environment PATH and the emacs exec-path"
        (setenv "PATH" (concat path ":" (getenv "PATH")))
        (add-to-list 'exec-path path))

      (jtdowney/add-exec-path "/usr/local/bin")
      (jtdowney/add-exec-path "~/.cargo/bin")
      (jtdowney/add-exec-path "~/.asdf/shims")
    #+end_src

* Common

  - Bump up the GC threshold. This is needed for =emacs-lsp=.

    #+begin_src emacs-lisp
      (setq gc-cons-threshold 20000000)
    #+end_src

  - Basic settings
    #+begin_src emacs-lisp
      (setq confirm-kill-emacs #'yes-or-no-p
            cursor-in-non-selected-windows t
            default-directory "~/"
            org-directory "~/org/"
            echo-keystrokes 0.1
            help-window-select t
            inhibit-startup-message t
            inhibit-startup-screen t
            initial-major-mode 'org-mode
            initial-scratch-message nil
            vc-follow-symlinks t)

      (setq-default require-final-newline t
                    sentence-end-double-space nil)
    #+end_src

  - Highlight whitespace
    #+begin_src emacs-lisp
      (setq jtdowney/whitespace-hooks '(prog-mode-hook
                                        text-mode-hook))
      (dolist (hook jtdowney/whitespace-hooks)
        (add-hook hook (lambda ()
                         (setq-local show-trailing-whitespace t))))
    #+end_src

  - Shorten yes or no
    #+begin_src emacs-lisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

  - I don’t want the customization clobbering my init.el.
    #+begin_src emacs-lisp
      (setq custom-file (concat user-emacs-directory "custom.el"))
      (load custom-file 'noerror)
    #+end_src

  - Allow local overrides of settings
    #+begin_src emacs-lisp
      (add-hook
       'after-init-hook
       (lambda ()
         (let ((private-file (concat user-emacs-directory "private.el")))
           (when (file-exists-p private-file)
             (load-file private-file)))))
    #+end_src

  - Automatically reload files if it changes on disk
    #+begin_src emacs-lisp
      (global-auto-revert-mode t)
    #+end_src

  - Use =editorconfig=
    #+begin_src emacs-lisp
      (use-package editorconfig
        :straight t
        :diminish
        :config
        (editorconfig-mode t))
    #+end_src

  - Don’t bother with auto save or backups.
    #+begin_src emacs-lisp
      (setq auto-save-default nil
            make-backup-files nil)
    #+end_src

* =evil=

  - I've used vim for so long that anything else is hard to switch to.
    #+begin_src emacs-lisp
      (use-package evil
        :straight t
        :init
        (setq evil-want-abbrev-expand-on-insert-exit nil
              evil-want-keybinding nil
              evil-respect-visual-line-mode t
              evil-want-C-i-jump nil
              evil-want-C-d-scroll t
              evil-want-C-u-scroll t)
        :config
        (evil-mode t))
    #+end_src

  - Add some extra evil integrations
    #+begin_src emacs-lisp
      (use-package evil-collection
        :straight t
        :after evil
        :config
        (evil-collection-init))
    #+end_src

  - Add surround mode for evil
    #+begin_src emacs-lisp
      (use-package evil-surround
        :straight t
        :after evil
        :config
        (global-evil-surround-mode t))
    #+end_src

* Key bindings

  - Install which-key for a handy popup key guide.
    #+begin_src emacs-lisp
      (use-package which-key
        :straight t
        :diminish
        :after evil-collection
        :config
        (which-key-mode t)
        (evil-collection-init 'which-key))
    #+end_src

  - Define initial key bindings
    #+begin_src emacs-lisp
      (evil-set-leader 'normal (kbd "SPC"))
      (evil-set-leader 'normal (kbd ",") t)

      (evil-define-key 'normal 'global
        (kbd "<leader>bk") 'kill-buffer
        (kbd "<leader>bK") 'kill-buffer-and-window
        (kbd "<leader>bs") (lambda ()
                             (interactive)
                             (switch-to-buffer "*scratch*"))
        (kbd "<leader>bY") (lambda ()
                             (interactive)
                             (mark-whole-buffer)
                             (kill-ring-save 0 0 t))
        (kbd "<leader>d") 'dired
        (kbd "<leader>ha") 'apropos-command
        (kbd "<leader>hf") 'describe-function
        (kbd "<leader>hk") 'describe-key
        (kbd "<leader>ho") 'describe-symbol
        (kbd "<leader>hv") 'describe-variable
        (kbd "<leader>xw") 'whitespace-cleanup)
    #+end_src

* Completion

** =ivy=

   #+begin_src emacs-lisp
     (use-package ivy
       :straight t
       :diminish
       :after evil-collection
       :init
       (setq enable-recursive-minibuffers t
             ivy-count-format "(%d/%d) "
             ivy-re-builders-alist '((read-file-name-internal . ivy--regex-fuzzy)
                                     (t . ivy--regex-plus))
             ivy-use-selectable-prompt t
             ivy-use-virtual-buffers t)
       :config
       (ivy-mode t)
       (evil-collection-init 'ivy)
       (evil-define-key 'normal 'global
         (kbd "<leader>bb") 'ivy-switch-buffer
         (kbd "<leader>rl") 'ivy-resume))

     (use-package ivy-hydra
       :straight t
       :after ivy)

     (use-package ivy-rich
       :straight t
       :after (ivy counsel)
       :init
       (setq ivy-rich-path-style 'abbrev)
       :config
       (ivy-rich-mode t))
   #+end_src

** =swiper=

   #+begin_src emacs-lisp
     (use-package swiper
       :straight t
       :after ivy
       :bind ("C-s" . swiper)
       :config
       (evil-define-key 'normal 'global
         (kbd "<leader>sb") 'swiper-all
         (kbd "<leader>ss") 'swiper))
   #+end_src

** =counsel=

   #+begin_src emacs-lisp
     (use-package counsel
       :straight t
       :after ivy
       :bind ("M-x" . counsel-M-x)
       :config
       (evil-define-key 'normal 'global
         (kbd "<leader>/") 'counsel-rg
         (kbd "<leader>:") 'counsel-M-x
         (kbd "<leader>?") 'counsel-descbinds
         (kbd "<leader>fL") 'counsel-locate
         (kbd "<leader>ff") 'counsel-find-file
         (kbd "<leader>fr") 'counsel-recentf
         (kbd "<leader>ry") 'counsel-yank-pop
         (kbd "<leader>sj") 'counsel-imenu))

     (use-package counsel-projectile
       :straight t
       :config
       (evil-define-key 'normal 'global
         (kbd "<leader>saf") 'counsel-rg
         (kbd "<leader>sap") 'counsel-projectile-rg
         (kbd "<leader>sgf") 'counsel-grep
         (kbd "<leader>sgp") 'counsel-projectile-git-grep))
    #+end_src

*** =smex=

    #+begin_src emacs-lisp
      (use-package smex
        :straight t)
    #+end_src

* Project management

  #+begin_src emacs-lisp
    (use-package projectile
      :straight t
      :init
      (setq projectile-completion-system 'ivy)
      :config
      (evil-define-key 'normal 'global
        (kbd "<leader>p") projectile-command-map)
      (projectile-global-mode t))
    #+end_src

* Movement

** =avy=

   #+begin_src emacs-lisp
     (use-package avy
       :straight t
       :config
       (evil-define-key 'normal 'global
         (kbd "<leader>jJ") 'evil-avy-goto-char-2
         (kbd "<leader>jj") 'evil-avy-goto-char
         (kbd "<leader>jl") 'evil-avy-goto-line
         (kbd "<leader>jw") 'evil-avy-goto-word-or-subword-1
         (kbd "<leader> SPC") 'evil-avy-goto-word-or-subword-1))
   #+end_src

* Navigation

  - Ranger
    #+begin_src emacs-lisp
      (use-package ranger
        :straight t
        :init
        (evil-define-key 'normal 'global
          (kbd "<leader>ar") 'ranger))
    #+end_src

  - Use =dired=
    #+begin_src emacs-lisp
      (require 'dired-x)
      (evil-define-key 'normal 'global
        (kbd "_") 'projectile-dired
        (kbd "-") 'dired-jump)
      (evil-define-key 'normal dired-mode-map (kbd "SPC") nil)
      (evil-define-key 'normal dired-mode-map "c" 'find-file)
    #+end_src

  - Use =treemacs=
    #+begin_src emacs-lisp
      (use-package treemacs
        :straight t
        :config
        (evil-define-key 'normal 'global
          (kbd "<leader>fd") 'treemacs-find-file
          (kbd "<leader>ft") 'treemacs))

      (use-package treemacs-evil
        :straight t
        :after (treemacs evil))

      (use-package treemacs-projectile
        :straight t
        :after (treemacs projectile))

      (use-package treemacs-icons-dired
        :straight t
        :after (treemacs dired)
        :config (treemacs-icons-dired-mode))

      (use-package treemacs-magit
        :straight t
        :after (treemacs magit))
    #+end_src

* Writing

** =writeroom-mode=

   #+begin_src emacs-lisp
     (use-package writeroom-mode
       :straight t)
   #+end_src

** =flyspell=

  #+begin_src emacs-lisp
    (use-package flyspell
      :straight t
      :diminish
      :hook ((text-mode . flyspell-mode)
             (prog-mode . flyspell-prog-mode))
      :init
      (setq ispell-program-name "aspell"))

    (use-package flyspell-correct
      :straight t)

    (use-package flyspell-correct-ivy
      :straight t)
  #+end_src

* =org=

** Agenda

   #+begin_src emacs-lisp
     (require 'find-lisp)
     (setq jtdowney/org-inbox-file (concat org-directory "inbox.org")
           org-agenda-files (find-lisp-find-files org-directory "\.org$"))
   #+end_src

** Refile

   #+begin_src emacs-lisp
     (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
   #+end_src

** =org-tempo=

   #+begin_src emacs-lisp
     (require 'org-tempo)
   #+end_src

** =evil= integration

   #+begin_src emacs-lisp
     (use-package evil-org
       :straight t
       :diminish evil-org-mode
       :after evil
       :hook (org-mode . evil-org-mode)
       :config
       (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading))
       (require 'evil-org-agenda)
       (evil-org-agenda-set-keys))
   #+end_src

** Key bindings

    #+begin_src emacs-lisp
      (evil-define-key 'normal 'global
        (kbd "<leader>oa") 'org-agenda-list
        (kbd "<leader>oc") 'counsel-org-capture
        (kbd "<leader>om") 'org-tags-view
        (kbd "<leader>oo") 'org-agenda
        (kbd "<leader>ot") 'org-todo-list)

      (evil-define-key 'normal org-mode-map
        (kbd "<localleader>!") 'org-time-stamp-inactive
        (kbd "<localleader>'") 'org-edit-special
        (kbd "<localleader>*") 'org-ctrl-c-star
        (kbd "<localleader>,") 'org-ctrl-c-ctrl-c
        (kbd "<localleader>-") 'org-ctrl-c-minus
        (kbd "<localleader>.") 'org-time-stamp
        (kbd "<localleader>/") 'org-sparse-tree
        (kbd "<localleader>:") 'org-set-tags
        (kbd "<localleader>A") 'org-archive-subtree
        (kbd "<localleader>D") 'org-insert-drawer
        (kbd "<localleader>H") 'org-shiftleft
        (kbd "<localleader>I") 'org-clock-in
        (kbd "<localleader>J") 'org-shiftdown
        (kbd "<localleader>K") 'org-shiftup
        (kbd "<localleader>L") 'org-shiftright
        (kbd "<localleader>N") 'widen
        (kbd "<localleader>O") 'org-clock-out
        (kbd "<localleader>P") 'org-set-property
        (kbd "<localleader>R") 'org-refile
        (kbd "<localleader>Sh") 'org-promote-subtree
        (kbd "<localleader>Sj") 'org-move-subtree-down
        (kbd "<localleader>Sk") 'org-move-subtree-up
        (kbd "<localleader>Sl") 'org-demote-subtree
        (kbd "<localleader>T") 'org-show-todo-tree
        (kbd "<localleader>^") 'org-sort
        (kbd "<localleader>a") 'org-agenda
        (kbd "<localleader>b") 'org-tree-to-indirect-buffer
        (kbd "<localleader>c") 'org-capture
        (kbd "<localleader>d") 'org-deadline
        (kbd "<localleader>e") 'org-export-dispatch
        (kbd "<localleader>f") 'org-set-effort
        (kbd "<localleader>hI") 'org-insert-heading
        (kbd "<localleader>hi") 'org-insert-heading-after-current
        (kbd "<localleader>hs") 'org-insert-subheading
        (kbd "<localleader>ia") 'org-attach
        (kbd "<localleader>if") 'org-footnote-new
        (kbd "<localleader>il") 'org-insert-link
        (kbd "<localleader>l") 'org-open-at-point
        (kbd "<localleader>n") 'org-narrow-to-subtree
        (kbd "<localleader>q") 'org-clock-cancel
        (kbd "<localleader>s") 'org-schedule
        (kbd "<localleader>tE") 'org-table-export
        (kbd "<localleader>tH") 'org-table-move-column-left
        (kbd "<localleader>tI") 'org-table-import
        (kbd "<localleader>tJ") 'org-table-move-row-down
        (kbd "<localleader>tK") 'org-table-move-row-up
        (kbd "<localleader>tL") 'org-table-move-column-right
        (kbd "<localleader>tN") 'org-table-create-with-table.el
        (kbd "<localleader>ta") 'org-table-align
        (kbd "<localleader>tb") 'org-table-blank-field
        (kbd "<localleader>tc") 'org-table-convert
        (kbd "<localleader>tdc") 'org-table-delete-column
        (kbd "<localleader>tdr") 'org-table-kill-row
        (kbd "<localleader>te") 'org-table-eval-formula
        (kbd "<localleader>th") 'org-table-previous-field
        (kbd "<localleader>tiH") 'org-table-hline-and-move
        (kbd "<localleader>tic") 'org-table-insert-column
        (kbd "<localleader>tih") 'org-table-insert-hline
        (kbd "<localleader>tir") 'org-table-insert-row
        (kbd "<localleader>tj") 'org-table-next-row
        (kbd "<localleader>tl") 'org-table-next-field
        (kbd "<localleader>tn") 'org-table-create
        (kbd "<localleader>tr") 'org-table-recalculate
        (kbd "<localleader>ts") 'org-table-sort-lines
        (kbd "<localleader>ttf") 'org-table-toggle-formula-debugger
        (kbd "<localleader>tto") 'org-table-toggle-coordinate-overlays
        (kbd "<localleader>tw") 'org-table-wrap-region
        (kbd "<localleader>RET") 'org-ctrl-c-ret)

      (evil-define-key 'normal org-src-mode-map
        (kbd "<localleader>c") 'org-edit-src-exit
        (kbd "<localleader>a") 'org-edit-src-abort
        (kbd "<localleader>k") 'org-edit-src-abort)
    #+end_src

** Display preferences

   - Use pretty bullets instead of asterisks.
     #+begin_src emacs-lisp
       (use-package org-bullets
         :straight t
         :hook (org-mode . org-bullets-mode))
     #+end_src

   - Use syntax highlighting in source blocks while editing.
     #+begin_src emacs-lisp
       (setq org-src-fontify-natively t)
     #+end_src

** Capture templates

   #+begin_src emacs-lisp
     (setq org-capture-templates
           `(("b" "Blog idea" entry
              (file ,(concat org-directory "blog-ideas.org"))
              "* %?\n")
             ("f" "Finished book" table-line
              (file+headline ,(concat org-directory "books.org") "Finished")
              "| %^{Title} | %^{Author} | %u |")
             ("r" "Book to read" entry
              (file+headline ,(concat org-directory "books.org") "To Read")
              "* %i%?\n")
             ("t" "Todo" entry
              (file ,jtdowney/org-inbox-file)
              "* TODO %i%?\n")))
   #+end_src

* macOS settings

  #+begin_src emacs-lisp
    (when (eq system-type 'darwin)
      (setq mac-command-modifier 'super
            mac-option-modifier 'meta
            mac-right-command-modifier 'super
            mac-right-option-modifier 'nil)
      (global-set-key (kbd "s-c") #'kill-ring-save)
      (global-set-key (kbd "s-v") #'yank)
      (global-set-key (kbd "s-x") #'kill-region))
  #+end_src

* UI

** Common

   - Highlight current line
     #+begin_src emacs-lisp
       (global-hl-line-mode t)
     #+end_src

   - Show column in mode line
     #+begin_src emacs-lisp
       (column-number-mode t)
     #+end_src

   - Show line numbers
     #+begin_src emacs-lisp
       (setq display-line-numbers-grow-only t
             display-line-numbers-width-start t
             linum-format "%4d \u2502 "
             jtdowney/line-number-hooks '(org-mode-hook
                                          markdown-mode-hook
                                          text-mode-hook
                                          prog-mode-hook)
             jtdowney/line-number-mode #'display-line-numbers-mode)

       (dolist (hook jtdowney/line-number-hooks)
         (add-hook hook jtdowney/line-number-mode))
     #+end_src

   - Show end of file
     #+begin_src emacs-lisp
       (when (display-graphic-p)
         (use-package vi-tilde-fringe
           :straight t
           :diminish
           :hook (prog-mode . vi-tilde-fringe-mode)))
     #+end_src

   - Tweak window chrome
     #+begin_src emacs-lisp
       (tool-bar-mode -1)
       (menu-bar-mode -1)

       (when (display-graphic-p)
         (scroll-bar-mode -1))
     #+end_src

   - Use fancy lambdas
     #+begin_src emacs-lisp
       (global-prettify-symbols-mode t)
     #+end_src

** Load a theme

   #+begin_src emacs-lisp
     (use-package zenburn-theme
       :straight t
       :init
       (setq zenburn-height-minus-1 1.0
             zenburn-height-plus-1 1.0
             zenburn-height-plus-2 1.0
             zenburn-height-plus-3 1.0
             zenburn-height-plus-4 1.0
             zenburn-use-variable-pitch nil
             zenburn-scale-org-headlines nil)
       (load-theme 'zenburn t))
   #+end_src

** Setup powerline

   #+begin_src emacs-lisp
     (use-package spaceline
       :straight t
       :config
       (spaceline-spacemacs-theme))
   #+end_src

** Set font and configure font resizing

   #+begin_src emacs-lisp
     (setq jtdowney/default-font "JetBrains Mono"
           jtdowney/default-font-size 12
           jtdowney/current-font-size jtdowney/default-font-size
           jtdowney/font-change-increment 1.1)

     (defun jtdowney/font-code ()
       "Return a string representing the current font (like \"Hack-15\")."
       (concat jtdowney/default-font "-" (number-to-string jtdowney/current-font-size)))

     (defun jtdowney/set-font-size ()
       "Set the font to `jtdowney/default-font' at `jtdowney/current-font-size'.
         Set that for the current frame, and also make it the default for
         other, future frames."
       (let ((font-code (jtdowney/font-code)))
         (add-to-list 'default-frame-alist (cons 'font font-code))
         (set-frame-font font-code)))

     (defun jtdowney/reset-font-size ()
       "Change font size back to `jtdowney/default-font-size'."
       (interactive)
       (setq jtdowney/current-font-size jtdowney/default-font-size)
       (jtdowney/set-font-size))

     (defun jtdowney/increase-font-size ()
       "Increase current font size by a factor of `jtdowney/font-change-increment'."
       (interactive)
       (setq jtdowney/current-font-size
             (ceiling (* jtdowney/current-font-size jtdowney/font-change-increment)))
       (jtdowney/set-font-size))

     (defun jtdowney/decrease-font-size ()
       "Decrease current font size by a factor of `jtdowney/font-change-increment', down to a minimum size of 1."
       (interactive)
       (setq jtdowney/current-font-size
             (max 1
                  (floor (/ jtdowney/current-font-size jtdowney/font-change-increment))))
       (jtdowney/set-font-size))

     (global-set-key (kbd "s-0") 'jtdowney/reset-font-size)
     (global-set-key (kbd "s-+") 'jtdowney/increase-font-size)
     (global-set-key (kbd "s-=") 'jtdowney/increase-font-size)
     (global-set-key (kbd "s-_") 'jtdowney/decrease-font-size)
     (global-set-key (kbd "s--") 'jtdowney/decrease-font-size)

     (jtdowney/reset-font-size)
   #+end_src

** Use font ligatures

   #+begin_src emacs-lisp
     ;; skip until emacs crashes are resolved
     ;; (use-package ligature
     ;;   :straight (ligature :type git :host github :repo "mickeynp/ligature.el")
     ;;   :config
     ;;   (ligature-set-ligatures 't '("www" "ff" "fi" "ffi"))
     ;;   (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
     ;;                                        ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
     ;;                                        "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
     ;;                                        "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
     ;;                                        "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
     ;;                                        "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
     ;;                                        "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
     ;;                                        "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
     ;;                                        ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
     ;;                                        "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
     ;;                                        "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
     ;;                                        "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
     ;;                                        "\\\\" "://"))
     ;;   ;; Enables ligature checks globally in all buffers. You can also do it
     ;;   ;; per mode with `ligature-mode'.
     ;;   (global-ligature-mode t))
   #+end_src

* Version control

** =magit=

   #+begin_src emacs-lisp
     (use-package magit
       :straight t
       :after evil-collection
       :config
       (setq magit-push-always-verify nil
             git-commit-summary-max-length 50)
       (evil-collection-init 'magit)
       (evil-define-key 'normal 'global
         (kbd "<leader>gS") 'magit-stage-file
         (kbd "<leader>gU") 'magit-unstage-file
         (kbd "<leader>gb") 'magit-blame
         (kbd "<leader>gfh") 'magit-log-buffer-file
         (kbd "<leader>gm") 'magit-dispatch-popup
         (kbd "<leader>gs") 'magit-status))
   #+end_src

** =git-timemachine=

   #+begin_src emacs-lisp
     (use-package git-timemachine
       :straight t
       :config
       (evil-define-key 'normal 'global
         (kbd "<leader>gt") 'git-timemachine))
   #+end_src

** Highlight uncommitted changes

   #+begin_src emacs-lisp
     (use-package diff-hl
       :straight t
       :hook ((prog-mode text-mode vc-dir-mode) . diff-hl-mode))
   #+end_src

* Notes

  #+begin_src emacs-lisp
    (defun jtdowney/deft ()
      "Start deft already in evil insert mode"
      (interactive)
      (deft)
      (evil-insert-state nil))

    (use-package deft
      :straight t
      :init
      (setq deft-directory "~/Dropbox/Notes"
            deft-default-extension "org"
            deft-use-filename-as-title nil
            deft-use-filter-string-for-filename t)
      :config
      (evil-define-key 'normal 'global
        (kbd "<leader>nv") 'jtdowney/deft
        (kbd "<leader>nf") 'deft-find-file)
      (evil-define-key 'normal deft-mode-map
        (kbd "<localleader>c") 'deft-filter-clear
        (kbd "<localleader>d") 'deft-delete-file
        (kbd "<localleader>i") 'deft-toggle-incremental-search
        (kbd "<localleader>n") 'deft-new-file
        (kbd "<localleader>r") 'deft-rename-file))
  #+end_src

* Programming environments

** General

   - Set tabs to display as 2 spaces instead of 8.
     #+begin_src emacs-lisp
       (setq-default tab-width 2)
       (setq-default indent-tabs-mode nil)
     #+end_src

   - Use matchit
     #+begin_src emacs-lisp
       (use-package evil-matchit
         :straight t
         :after evil
         :config
         (global-evil-matchit-mode t))
     #+end_src

   - Treat =_= as part of a word like vim
     #+begin_src emacs-lisp
       (add-hook 'prog-mode-hook (lambda () (modify-syntax-entry ?_ "w")))
     #+end_src

   - Delete trailing whitespace
     #+begin_src emacs-lisp
       (add-hook 'before-save-hook (lambda ()
                                     (when (derived-mode-p 'prog-mode)
                                       (whitespace-cleanup))))
     #+end_src

   - Diminish minor modes
     #+begin_src emacs-lisp
       (diminish 'eldoc-mode)
     #+end_src

** Snippets

   #+begin_src emacs-lisp
     (use-package yasnippet
       :straight t
       :diminish yas-minor-mode
       :config
       (evil-define-key 'insert 'global (kbd "C-e") 'yas-expand)
       (yas-global-mode t))

     (use-package yasnippet-snippets
       :straight t)
   #+end_src

** LSP

   #+begin_src emacs-lisp
     (setq jtdowney/lsp-modes '(elixir-mode
                                dockerfile-mode
                                enh-ruby-mode
                                rust-mode))

     (use-package lsp-mode
       :straight t
       :hook (lsp-mode . lsp-enable-which-key-integration)
       :init
       (add-hook 'hack-local-variables-hook
                 (lambda ()
                   (when (member major-mode jtdowney/lsp-modes)
                     (lsp)
                     (evil-define-key 'normal 'local
                       (kbd "<localleader>") lsp-command-map)))))

     (use-package lsp-ui
       :straight t
       :commands lsp-ui-mode)

     (use-package lsp-ivy
       :straight t
       :commands lsp-ivy-workspace-symbol)

     (use-package lsp-treemacs
       :straight t
       :commands lsp-treemacs-errors-list)
   #+end_src

** Completion

   #+begin_src emacs-lisp
     (use-package company
       :straight t
       :after evil-collection
       :hook (after-init . global-company-mode)
       :diminish
       :init
       (setq company-idle-delay 0.1
             company-minimum-prefix-length 1
             company-selection-wrap-around t
             company-backends '(company-capf
                                company-files
                                company-keywords)
             company-global-modes '(not org-mode))
       :config
       (evil-collection-init 'company))
   #+end_src

** Smartparens

   #+begin_src emacs-lisp
     (use-package smartparens
       :straight t
       :diminish
       :config
       (require 'smartparens-config)
       (smartparens-global-mode t))
   #+end_src

** Comments

   #+begin_src emacs-lisp
     (use-package evil-commentary
       :straight t
       :diminish
       :after evil
       :config
       (evil-commentary-mode t))
   #+end_src

** Syntax checking

   #+begin_src emacs-lisp
     (use-package flycheck
       :straight t
       :diminish
       :hook (after-init . global-flycheck-mode)
       :init
       (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
       :config
       (evil-collection-init 'flycheck)
       (evil-define-key 'normal 'global
         (kbd "<leader>el") 'flycheck-list-errors
         (kbd "<leader>en") 'flycheck-next-error
         (kbd "<leader>ep") 'flycheck-previous-error))
   #+end_src

** Docker

   #+begin_src emacs-lisp
     (use-package dockerfile-mode
       :straight t
       :mode ("Dockerfile\\'"))
   #+end_src

** Just

   #+begin_src emacs-lisp
     (use-package just-mode
       :straight t)
   #+end_src

** Markdown

   #+begin_src emacs-lisp
     (use-package markdown-mode
       :straight t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)))
   #+end_src

** YAML

   #+begin_src emacs-lisp
     (use-package yaml-mode
       :straight t)
   #+end_src

** TOML

   #+begin_src emacs-lisp
     (use-package toml-mode
       :straight t)
   #+end_src

** Lisps

   #+begin_src emacs-lisp
     (setq lispy-modes
           '(clojure-mode
             emacs-lisp-mode
             lisp-mode
             racket-mode
             scheme-mode))

     (defvar lispy-mode-hook nil
       "Hook called after a lispy mode is activated")

     (use-package rainbow-delimiters
       :straight t
       :hook (lispy-mode . rainbow-delimiters-mode))

     (dolist (mode lispy-modes)
       (add-hook (intern (concat (symbol-name mode) "-hook"))
                 (lambda ()
                   (setq-local show-paren-mode t)
                   (run-hooks 'lispy-mode-hook))))

     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
   #+end_src

** Rust

*** =rust-mode=

    #+begin_src emacs-lisp
      (use-package rust-mode
        :straight t
        :mode "\\.rs\\'"
        :init
        (setq rust-format-on-save t))
    #+end_src

*** =cargo=

    #+begin_src emacs-lisp
      (use-package cargo
        :straight t
        :diminish cargo-minor-mode
        :config
        (add-hook 'rust-mode-hook
                  (lambda ()
                    (cargo-minor-mode t)
                    (evil-define-key 'normal rust-mode-map
                      (kbd "<localleader>c.") 'cargo-process-repeat
                      (kbd "<localleader>cC") 'cargo-process-clean
                      (kbd "<localleader>cK") 'cargo-process-clippy
                      (kbd "<localleader>cU") 'cargo-process-upgrade
                      (kbd "<localleader>cX") 'cargo-process-run-example
                      (kbd "<localleader>ca") 'cargo-process-add
                      (kbd "<localleader>cc") 'cargo-process-build
                      (kbd "<localleader>cd") 'cargo-process-doc
                      (kbd "<localleader>cf") 'cargo-process-fmt
                      (kbd "<localleader>ck") 'cargo-process-check
                      (kbd "<localleader>cr") 'cargo-process-rm
                      (kbd "<localleader>cu") 'cargo-process-update
                      (kbd "<localleader>cx") 'cargo-process-run
                      (kbd "<localleader>ta") 'cargo-process-test
                      (kbd "<localleader>tb") 'cargo-process-current-file-tests
                      (kbd "<localleader>tt") 'cargo-process-current-test))))
    #+end_src

*** =flycheck-rust=

    #+begin_src emacs-lisp
      (use-package flycheck-rust
        :straight t
        :hook (rust-mode . flycheck-rust-setup))
    #+end_src

** Elixir

*** =elixir-mode=

    #+begin_src emacs-lisp
      (use-package elixir-mode
        :straight t
        :mode ("\\.ex\\'" "\\.exs\\'")
        :config
        (add-hook 'before-save-hook 'elixir-format nil t))
    #+end_src

*** =flycheck-mix=

    #+begin_src emacs-lisp
      (use-package flycheck-mix
        :straight t
        :config
        (flycheck-mix-setup))
    #+end_src

** Gleam

   #+begin_src emacs-lisp
     (use-package gleam-mode
       :straight (gleam-mode
                  :host github
                  :repo "gleam-lang/gleam-mode")
       :mode "\\.gleam\\'")
   #+end_src

** Ruby

*** =enh-ruby-mode=

    #+begin_src emacs-lisp
      (use-package enh-ruby-mode
        :straight t
        :mode (("Appraisals\\'" . enh-ruby-mode)
               ("\\(Rake\\|Thor\\|Guard\\|Gem\\|Cap\\|Vagrant\\|Berks\\|Pod\\|Puppet\\)file\\'" . enh-ruby-mode)
               ("\\.\\(rb\\|rabl\\|ru\\|builder\\|rake\\|thor\\|gemspec\\|jbuilder\\)\\'" . enh-ruby-mode))
        :interpreter "ruby"
        :init
        (setq enh-ruby-deep-indent-paren nil
              enh-ruby-hanging-paren-deep-indent-level 2))
    #+end_src

*** =bundler=

    #+begin_src emacs-lisp
      (use-package bundler
        :straight t
        :after enh-ruby-mode
        :config
        (evil-define-key 'normal enh-ruby-mode-map
          (kbd "<leader>bi") 'bundle-install
          (kbd "<leader>bs") 'bundle-console
          (kbd "<leader>bu") 'bundle-update
          (kbd "<leader>bx") 'bundle-exec))
    #+end_src

* Email

** =mu4e=

   #+begin_src emacs-lisp
     (use-package mu4e
       :straight t
       :config
       (setq mu4e-sent-messages-behavior 'sent
             mu4e-get-mail-command "mbsync -a"
             mu4e-update-interval 300
             mu4e-view-show-images t
             mu4e-show-images t
             mu4e-view-image-max-width 800
             mu4e-view-prefer-html nil
             mail-user-agent 'mu4e-user-agent)
       (add-to-list 'mu4e-view-actions
                    '("ViewInBrowser" . mu4e-action-view-in-browser) t)
       (defun jtdowney/render-html-message ()
         (let ((dom (libxml-parse-html-region (point-min) (point-max))))
           (erase-buffer)
           (shr-insert-document dom)
           (goto-char (point-min))))
       (setq mu4e-html2text-command 'jtdowney/render-html-message)
       :init
       (evil-define-key 'normal 'global
         (kbd "<leader>ae") 'mu4e))
   #+end_src

** =mu4e-dashboard=

   #+begin_src emacs-lisp
     (use-package mu4e-dashboard
       :straight (mu4e-dashboard :type git :host github
                                 :repo "rougier/mu4e-dashboard"))
   #+end_src

* RSS

** =elfeed=

   #+begin_src emacs-lisp
     (use-package elfeed
       :straight t
       :init
       (evil-define-key 'normal 'global
         (kbd "<leader>af") 'elfeed))
   #+end_src

** =elfeed-protocol=

   #+begin_src emacs-lisp
     (use-package elfeed-protocol
       :straight t
       :init
       (elfeed-protocol-enable))
   #+end_src

* IRC

** =circe=

   #+begin_src emacs-lisp
     (use-package circe
       :straight t
       :config
       (setq circe-reduce-lurker-spam t))
   #+end_src
